/**
 * @license
 *
 * Copyright IBM Corp. 2019, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { LitElement, html } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { prefix } from '../../globals/settings';
import HostListener from '../../globals/decorators/host-listener';
import HostListenerMixin from '../../globals/mixins/host-listener';
import styles from './tile.scss';

/**
 * Tile group.
 *
 * @element cds-tile-group
 */
@customElement(`${prefix}-tile-group`)
class CDSTileGroup extends HostListenerMixin(LitElement) {
  @HostListener('document:eventRadioChange')
  // @ts-ignore
  private _handleRadioTileSelect(event: Event) {
    const { target } = event;
    const { name } = (event as any).detail;
    const { currentRadioSelection } = this;
    const { eventCurrentRadioTileSelection } = this
      .constructor as typeof CDSTileGroup;

    if (!currentRadioSelection) {
      this.currentRadioSelection = target;
    } else if (currentRadioSelection != target) {
      currentRadioSelection.selected = false;
      this.currentRadioSelection = target;
    }

    this.dispatchEvent(
      new CustomEvent(eventCurrentRadioTileSelection, {
        bubbles: true,
        composed: true,
        detail: {
          target,
          name,
        },
      })
    );
  }

  @property()
  currentRadioSelection;

  @property()
  radioTiles;

  firstUpdated() {
    if (!this.hasAttribute('role')) {
      this.setAttribute('role', 'group');
    }

    if (!this.radioTiles) {
      this.radioTiles = this.querySelectorAll(
        (this.constructor as typeof CDSTileGroup).selectorRadioTile
      );
    }
  }

  render() {
    return html`
      <slot name="legend" class="${prefix}--label"></slot>
      <slot></slot>
    `;
  }

  /**
   * A selector that selects a radio tile component.
   */
  static get selectorRadioTile() {
    return `${prefix}-radio-tile`;
  }

  /**
   * The name of the custom event fired after a radio tile changes its selected state.
   */
  static get eventCurrentRadioTileSelection() {
    return `${prefix}-current-radio-tile-selection`;
  }

  /**
   * The name of the custom event fired after a radio tile changes its selected state.
   */
  static get eventRadioChange() {
    return `${prefix}-radio-tile-selected`;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

export default CDSTileGroup;
