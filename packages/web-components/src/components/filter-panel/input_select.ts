/**
 * @license
 *
 * Copyright IBM Corp. 2020, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { customElement, html, property, LitElement } from 'lit-element';
// import { classMap } from 'lit-html/directives/class-map';
import ddsSettings from '@carbon/ibmdotcom-utilities/es/utilities/settings/settings.js';
import settings from 'carbon-components/es/globals/js/settings';
import Close from 'carbon-web-components/es/icons/close/16';
import StableSelectorMixin from '../../globals/mixins/stable-selector';

import styles from './filter-panel.scss';

const { prefix } = settings;
const { stablePrefix: ddsPrefix } = ddsSettings;

@customElement(`${ddsPrefix}-input-select`)
class DDSInputSelect extends StableSelectorMixin(LitElement) {
  @property()
  isOpen = false;

  @property({ type: String, reflect: true })
  protected selectValue = '';

  // Figure out how to pass array of strings through props
  @property()
  options: string[] = ['Content Management System', 'Digital Asset Management', 'Document Management', 'Web Content Management'];

  @property()
  title: string;

  protected _toggleSelect = () => {
    this.isOpen = !this.isOpen;
    // if (this._tierOneElementIsSelected() === true) {
    //
    // }
    const { eventContentStateChange } = this.constructor as typeof DDSInputSelect;
    this.dispatchEvent(
      new CustomEvent(eventContentStateChange, {
        bubbles: true,
      })
    );
  };

  /**
   * Returns a value
   */
  protected _setValue(value: string, e) {
    e.stopPropagation();
    this.selectValue = value;
  }

  protected _tierOneElementIsSelected = () => {
    if (this.isOpen && !this.selectValue) {
      return 'selected';
    }
    return null;
  };

  render() {
    const { title } = this;
    return html`
      <div class="${prefix}--input_container">
        <div class="${this._tierOneElementIsSelected()} select" tabindex="1" @click=${this._toggleSelect}>
          <span>${title}</span>
          <div class="svg">
            ${!this.selectValue && this.isOpen ? Close() : null}
          </div>
        </div>
        <ul class="${this.isOpen ? '' : 'hidden'} select-dropdown">
          ${this.options.map((option, idx) => {
            const selectedOption = this.selectValue;
            return html`
              <li
                id="${idx}"
                @click=${e => this._setValue(option, e)}
                class="select-option ${selectedOption === option ? 'selected' : ''}"
              >
                ${option}
                <div class="svg" @click=${e => this._setValue('', e)}>
                  ${selectedOption === option ? Close() : null}
                </div>
              </li>
            `;
          })}
        </ul>
      </div>
    `;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

export default DDSInputSelect;
